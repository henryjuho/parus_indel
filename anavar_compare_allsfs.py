#!/usr/bin/env python

import argparse
import itertools
import subprocess

# arguments
parser = argparse.ArgumentParser()
parser.add_argument('-i_sfs', '--insertion_sfs',
                    help='The sfs file for insertions generated by indelSFS.py',
                    required=True)
parser.add_argument('-d_sfs', '--deletion_sfs',
                    help='The sfs file for deletions generated by indelSFS.py',
                    required=True)
parser.add_argument('-s_sfs', '--snp_sfs',
                    help='The sfs file for SNPs generated by snpSFS.py',
                    required=True)
parser.add_argument('-n', '--n', help='Sample size', required=True)
parser.add_argument('-out', '--output_prefix',
                    help='Output path and file prefix for control, data and results files',
                    required=True)
parser.add_argument('-evolgen', '--evolgen', help='If specified will submit to lab queue', action='store_true',
                    default=False)
parser.add_argument('-node', '--node', help='Will run on specified nodes', default='0')
args = parser.parse_args()

# variables
i_sfs = args.insertion_sfs
d_sfs = args.deletion_sfs
s_sfs = args.snp_sfs
n = args.n
out = args.output_prefix
evolgen = args.evolgen
node = args.node

region_list = ['CDS', 'CDS_non_frameshift', 'CDS_frameshift', 'intron', 'intergenic']
lrt_list = ['equal_gammas_ins', 'equal_gammas_del', 'equal_kappas']

combinations = [x for x in itertools.product(region_list, region_list, lrt_list) if len(set(x)) > 2]

# run all combinations
for comp in combinations:

    run_out = out + '_'.join(comp)

    r1 = comp[0]
    r2 = comp[1]
    lrt = comp[2]

    anavar_command = ('./anavar.py '
                      '-i_sfs ' + i_sfs + ' '
                      '-d_sfs ' + d_sfs + ' '
                      '-s_sfs ' + s_sfs + ' '
                      '-n ' + n + ' '
                      '-r ' + r1 + ' '
                      '-r2 ' + r2 + ' '
                      '-lrt ' + lrt + ' '
                      '-out ' + run_out + ' '
                      '-node ' + node + ' ')

    if evolgen is True:
        anavar_command += '-evolgen'

    subprocess.call(anavar_command, shell=True)
