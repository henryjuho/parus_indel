import argparse
import subprocess

# command line options
parser = argparse.ArgumentParser()
parser.add_argument('-VCF', '--VCF_input', help='VCF file to filter', required=True)
parser.add_argument('-ncl', '--noclean', help='If specified, will not remove intermediate files generated by GATK',
                    action='store_true', default=False)
args = parser.parse_args()

# variables
input_vcf = args.VCF_input
output_prefix = ''
if input_vcf.endswith('.vcf.gz'):
    output_prefix = input_vcf.rstrip('.vcf.gz')
elif input_vcf.endswith('.vcf'):
    output_prefix = input_vcf.rstrip('.vcf')
gt_ref = '/fastdata/bop15hjb/GT_ref/Parus_major_1.04.rename.fa'

# GATK command lines
extract_indels = ('"java -Xmx6g -jar $GATKHOME/GenomeAnalysisTK.jar '
                  '-T SelectVariants '
                  '-R ' + gt_ref + ' '
                  '-V ' + input_vcf + ' '
                  '-selectType INDEL  '
                  '-trimAlternates '
                  '-env '
                  '-o ' + output_prefix + '.rawindels.vcf"')

hard_filter = ('"java -Xmx6g -jar $GATKHOME/GenomeAnalysisTK.jar '
               '-T VariantFiltration '
               '-R ' + gt_ref + ' '
               '-V ' + output_prefix + '.rawindels.vcf '
               '-o ' + output_prefix + '.rawindels.hardfiltered.vcf '
               '--filterExpression \'QD<2.0\' --filterName \'indelQD\' '
               '--filterExpression \'FS>200.0\' --filterName \'indelFS\' '
               '--filterExpression \'ReadPosRankSum<-20.0\' --filterName \'indelRPRS\'"')

extract_passed = ('"java -Xmx6g -jar $GATKHOME/GenomeAnalysisTK.jar '
                  '-T SelectVariants '
                  '-R ' + gt_ref + ' '
                  '-V ' + output_prefix + '.rawindels.hardfiltered.vcf '
                  '-o ' + output_prefix + '.rawindels.hardfiltered.pass.vcf '
                  '--excludeFiltered"')

# write qsub job
qsub_gen_hardfilter = ('python qsub_gen.py '
                       '-mo java -mo python -mo gatk '
                       '-OM q '
                       '-mem 10 -rmem 10 '
                       '-o ' + output_prefix + '.filtering '
                       '-cmd ' + extract_indels + ' '
                       '-cmd ' + hard_filter + ' '
                       '-cmd ' + extract_passed)
if args.noclean is False:  # remove interstage vcfs and indices
    qsub_gen_hardfilter += (' -cmd "rm ' + output_prefix + '.rawindels.vcf"'
                            ' -cmd "rm ' + output_prefix + '.rawindels.hardfiltered.vcf"'
                            ' -cmd "rm ' + output_prefix + '.rawindels.vcf.idx"'
                            ' -cmd "rm ' + output_prefix + '.rawindels.hardfiltered.vcf.idx"')

# call qsub_gen.py
subprocess.call(qsub_gen_hardfilter, shell=True)
